#!/usr/bin/env python3
# coding=utf8
# version: 1.0.0

import torch
from torch import nn
from torch.nn import functional as F
from Components import StackedRnn, Stack, Residual, LastDim, InspectSize, SiLU, ForceDropout
from torch.autograd import Variable
import random
from utils import createVariable

hdim = 10
up = [2, 2, 2, 2]
channel = [128, 128, 128, 64, 32]
noiseDim = 128
dropout = 0.2

class ElemBatchNorm(nn.BatchNorm1d):
    def forward(self, x):
        s = x.size()
        x = x.view(s[0], -1)
        x = super().forward(x)
        return x.view(s)

class Generator(nn.Module):
    def __init__(self, dropout=0):
        super().__init__()

        #  self.noise = nn.Sequential(
                #  nn.Linear(128, 48 * hdim * hdim)
                #  )

        #  self.hair = nn.Embedding(12, 8 * hdim * hdim)
        #  self.eyes = nn.Embedding(11, 8 * hdim * hdim)
        #  self.tag = nn.Sequential(
                #  nn.Linear(12 + 11, noiseDim),
                #  )

        #  self.inp = nn.Sequential(
                #  nn.Linear(noiseDim, channel[0] * hdim * hdim),
                #  )

        self.inp = nn.Sequential(
                nn.Linear(noiseDim + 11 + 12, channel[0] * hdim * hdim),
                )

        self.conv = nn.Sequential(
                #  ForceDropout(dropout),
                #  nn.BatchNorm1d(channel[0]),
                nn.LeakyReLU(),
                #  nn.ReLU(),
                Stack(1, lambda i: (
                    Residual(
                        nn.Conv2d(channel[0], channel[0], 3, padding=1),
                        #  ForceDropout(dropout if i % 2 == 1 else 0),
                        ElemBatchNorm(channel[0] * hdim * hdim),
                        nn.LeakyReLU(),
                        nn.Conv2d(channel[0], channel[0], 3, padding=1),
                        #  nn.Dropout2d(dropout),
                        #  nn.Dropout(dropout),
                        ElemBatchNorm(channel[0] * hdim * hdim),
                        #  ForceDropout(dropout),
                        ),
                    )),
                Stack(len(up), lambda i: (
                    #  nn.Conv2d(64, 64, 3, padding=1),
                    #  #  ForceDropout(dropout),
                    #  #  nn.ReLU(),
                    #  #  nn.BatchNorm2d(64),
                    #  nn.LeakyReLU(),
                    nn.Upsample(scale_factor=up[i], mode='nearest'),
                    nn.Conv2d(channel[i], channel[i+1], 5, padding=0, bias=True),
                    #  nn.Dropout2d(dropout),
                    #  nn.Dropout(dropout),
                    nn.BatchNorm2d(channel[i+1]),
                    #  nn.Conv2d(channel[i], channel[i+1] * up[i] * up[i], 5, padding=2),
                    #  nn.PixelShuffle(up[i]),
                    #  nn.BatchNorm2d(channel[i+1]),
                    #  ForceDropout(dropout),
                    #  nn.ReLU(),
                    nn.LeakyReLU(),
                    )),
                nn.Conv2d(channel[-1], channel[-1], 3, padding=0, bias=True),
                nn.BatchNorm2d(channel[-1]),
                #  ForceDropout(dropout),
                #  nn.ReLU(),
                nn.LeakyReLU(),
                nn.Conv2d(channel[-1], channel[-1], 3, padding=0, bias=True),
                nn.BatchNorm2d(channel[-1]),
                #  ForceDropout(dropout),
                #  nn.ReLU(),
                nn.LeakyReLU(),
                nn.Conv2d(channel[-1], 3, 1, bias=True),
                #  nn.Sigmoid(),
                #  nn.Tanh(),
                )

        #  for p in self.inp.parameters():
            #  p.requires_grad = False

        #  for m in self.modules():
            #  if isinstance(m, nn.Linear) or isinstance(m, nn.Conv2d):
                #  m.weight.data.normal_(0.0, 0.02)


    def forward(self, noise, hair, eyes):
        hair, eyes = hair.unsqueeze(1), eyes.unsqueeze(1)
        ohair = createVariable(torch.zeros(hair.size(0), 12), hair.is_cuda)
        ohair.data.scatter_(1, hair.data, 1) # * 0.8 + 0.2
        #  ohair = ohair + noise[:,:12]
        oeyes = createVariable(torch.zeros(eyes.size(0), 11), eyes.is_cuda)
        oeyes.data.scatter_(1, eyes.data, 1) # * 0.8 + 0.2
        #  oeyes = oeyes + noise[:,12:12+11]
        #  noise = noise[:,12+11:]
        #  x = torch.cat([ohair, oeyes], 1)
        #  x = self.tag(x)
        #  x = x * noise
        x = torch.cat([noise, ohair, oeyes], 1)
        #  x = self.tag(x)
        #  x = x * noise
        x = self.inp(x).view(x.size(0), channel[0], hdim, hdim)

        #  noise = self.noise(noise).view(noise.size(0), 48, hdim, hdim)
        #  hair = self.hair(hair).view(hair.size(0), 8, hdim, hdim)
        #  eyes = self.eyes(eyes).view(eyes.size(0), 8, hdim, hdim)
        #  x = torch.cat([noise, hair, eyes], 1)
        y = self.conv(x)
        return y
